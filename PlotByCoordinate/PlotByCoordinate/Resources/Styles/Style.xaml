<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:viewModels="clr-namespace:PlotByCoordinate.ViewModels"
    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes">
    <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Title" Value="DrawingPanelView"/>
        <Setter Property="Width" Value="800"/>
        <Setter Property="Height" Value="600"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="BorderBrush" Value="#3448a1"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="WindowStyle" Value="None"></Setter>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CaptionHeight="15"
                    CornerRadius="5"
                    GlassFrameThickness="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
        <Setter Property="AllowsTransparency" Value="False"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=WindowState}" Value="{x:Static WindowState.Maximized}">
                <Setter Property="BorderThickness" Value="8"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxStyle" TargetType="TextBox">
        <Setter Property="Width" Value="60" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Background" Value="LightBlue" />
    </Style>
    <Style x:Key="CanvasStyle" TargetType="Canvas">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="ClipToBounds" Value="true" />
        <Setter Property="Background">
            <Setter.Value>
                <DrawingBrush
                    TileMode="Tile"
                    Viewport="0,0,10,10"
                    ViewportUnits="Absolute">
                    <DrawingBrush.Drawing>
                        <DrawingGroup>
                            <DrawingGroup.Children>
                                <GeometryDrawing>
                                    <GeometryDrawing.Brush>
                                        <SolidColorBrush Color="Black" />
                                    </GeometryDrawing.Brush>
                                    <GeometryDrawing.Geometry>
                                        <RectangleGeometry Rect="0,0,50,50" />
                                    </GeometryDrawing.Geometry>
                                    <GeometryDrawing.Pen>
                                        <Pen Brush="White" />
                                    </GeometryDrawing.Pen>
                                </GeometryDrawing>
                            </DrawingGroup.Children>
                        </DrawingGroup>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EllipseForFirstPoint" TargetType="Path">
        <Setter Property="Fill" Value="#03FFB3" />
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="{Binding TriangleCoordinate.PointsOfTriangle[0]}"
                    RadiusX="6"
                    RadiusY="6" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Triangle, Path=Points.Count}" Value="3">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="EllipseForSecondPoint" TargetType="Path">
        <Setter Property="Fill" Value="#0339FF" />
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="{Binding TriangleCoordinate.PointsOfTriangle[1]}"
                    RadiusX="6"
                    RadiusY="6" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Triangle, Path=Points.Count}" Value="3">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="EllipseForThirdPoint" TargetType="Path">
        <Setter Property="Fill" Value="#BB03FF" />
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="{Binding TriangleCoordinate.PointsOfTriangle[2]}"
                    RadiusX="6"
                    RadiusY="6" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Triangle, Path=Points.Count}" Value="3">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="EllipseForStartPoint" TargetType="Path">
        <Setter Property="Fill" Value="#18FF03" />
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="{Binding LineCoordinate.PointsOfLine[0]}"
                    RadiusX="6"
                    RadiusY="6" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Line, Path=Points.Count}" Value="2">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="EllipseForEndPoint" TargetType="Path">
        <Setter Property="Fill" Value="#FFE603" />
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="{Binding LineCoordinate.PointsOfLine[1]}"
                    RadiusX="6"
                    RadiusY="6" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Line, Path=Points.Count}" Value="2">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="EllipseForFirstPointBeforeLabel" TargetType="Path">
        <Setter Property="Fill" Value="#03FFB3" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="-10,-120"
                    RadiusX="3"
                    RadiusY="3" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EllipseForSecondPointBeforeLabel" TargetType="Path">
        <Setter Property="Fill" Value="#0339FF" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="-10,-80"
                    RadiusX="3"
                    RadiusY="3" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EllipseForThirdPointBeforeLabel" TargetType="Path">
        <Setter Property="Fill" Value="#BB03FF" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="-10,-40"
                    RadiusX="3"
                    RadiusY="3" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EllipseForStartPointBeforeLabel" TargetType="Path">
        <Setter Property="Fill" Value="#18FF03" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="-10,70"
                    RadiusX="3"
                    RadiusY="3" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EllipseForEndPointBeforeLabel" TargetType="Path">
        <Setter Property="Fill" Value="#FFE603" />
        <Setter Property="Data">
            <Setter.Value>
                <EllipseGeometry
                    Center="-10,110"
                    RadiusX="3"
                    RadiusY="3" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PathStyle" TargetType="Path">
        <Setter Property="Stroke" Value="White" />
        <Setter Property="StrokeThickness" Value="3" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    <Style x:Key="ButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Background" Value="#3448a1" />
    </Style>
    <Style x:Key="PathStyleForMinWindow" TargetType="Path">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="Data" Value="F1M0,1L12.001,1 12.001,0 0,0z" />
        <Setter Property="Fill" Value="#FF9AA4D0" />
    </Style>
    <Style x:Key="PathStyleForMaXWindow" TargetType="Path">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="Fill" Value="#FF9AA4D0" />
    </Style>
    <Style x:Key="PathClose" TargetType="Path">
        <Setter Property="Width" Value="11.707" />
        <Setter Property="Data" Value="F1M11.706,0.706L11,0 5.852,5.146 0.706,0 -0.001,0.706 5.146,5.852 -0.001,11 0.706,11.706 5.852,6.56 11,11.706 11.706,11 6.56,5.852z" />
        <Setter Property="Height" Value="11.707" />
        <Setter Property="Fill" Value="#FF9AA4D0" />
    </Style>
    <Style x:Key="ImageStyle" TargetType="Image">
        <Setter Property="Width" Value="8" />
        <Setter Property="Height" Value="8" />
    </Style>
    <Style x:Key="PathOfTriangle" TargetType="Path">
        <Setter Property="Width" Value="21.153" />
        <Setter Property="Height" Value="13.5" />
        <Setter Property="Data" Value="F1M0,13.5L21.153,13.5 10.577,0z M10.577,2.433L18.073,12 3.082,12z" />
        <Setter Property="Fill" Value="#FF3448A1" />
    </Style>
    <Style x:Key="PathOfLine" TargetType="Path">
        <Setter Property="Width" Value="15.911" />
        <Setter Property="Height" Value="12.662" />
        <Setter Property="Data" Value="F1M0.911,12.662L0,11.471 14.999,0 15.911,1.191z" />
        <Setter Property="Fill" Value="#FF3448A1" />
    </Style>
    <Style x:Key="PathOfMaxWindow" TargetType="Path">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="Fill" Value="#FF9AA4D0" />
        <Setter Property="Data" Value="F1M11,11L1,11 1,1 11,1z M11,0L1,0 0,0 0,1 0,11 0,12 1,12 11,12 12,12 12,11 12,1 12,0z" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Win, Path=WindowState}" Value="Maximized">
                <Setter Property="Data" Value="F1M11,8L9,8 9,4 9,3 8,3 4,3 4,1 11,1z M8,11L1,11 1,4 3,4 4,4 8,4 8,8 8,9z M11,0L4,0 3,0 3,1 3,3 1,3 0,3 0,4 0,11 0,12 1,12 8,12 9,12 9,11 9,9 11,9 12,9 12,8 12,1 12,0z" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Line" TargetType="Polyline">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Stroke" Value="White" />
        <Setter Property="StrokeThickness" Value="3" />
    </Style>
    <Style x:Key="Triangle" TargetType="Polygon">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Stroke" Value="White" />
        <Setter Property="StrokeThickness" Value="3" />
    </Style>
    <Style x:Key="HorizontalListView" TargetType="ListView">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="25,0,25,0" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Padding" Value="-1,0,0,0" />
        <Setter Property="ItemsSource" Value="{Binding Source={StaticResource Locator},Path=Coordinate.RulerListOfHorizontal, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True" Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalListViewItem" TargetType="ListViewItem">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Width" Value="50" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="AntiqueWhite" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Line, Path=Points.Count}" Value="2">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=Triangle, Path=Points.Count}" Value="3">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="VerticalListView" TargetType="ListView">

        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,25,0,25" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Padding" Value="-1,0,0,0" />
        <Setter Property="ItemsSource" Value="{Binding Source={StaticResource Locator},Path=Coordinate.RulerListOfVertical, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True" Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalListViewItem" TargetType="ListViewItem">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Height" Value="50" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="AntiqueWhite" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=Line, Path=Points.Count}" Value="2">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=Triangle, Path=Points.Count}" Value="3">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridOfHorizontal" TargetType="Grid">
        <Setter Property="Height" Value="30px" />
    </Style>
    <Style x:Key="GridOfVertical" TargetType="Grid">
        <Setter Property="Width" Value="40px" />
    </Style>



    <Style x:Key="MaterialDesignTextBoxBase" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="0 0 1 0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}" />
        <Setter Property="wpf:TextFieldAssist.IncludeSpellingSuggestions" Value="{Binding RelativeSource={RelativeSource Self}, Path=(SpellCheck.IsEnabled)}" />
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <!--  cludge the default context menu  -->
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="Cut">
                        <MenuItem.Icon>
                            <wpf:PackIcon Kind="ContentCut" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Copy">
                        <MenuItem.Icon>
                            <wpf:PackIcon Kind="ContentCopy" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Paste">
                        <MenuItem.Icon>
                            <wpf:PackIcon Kind="ContentPaste" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Border
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"
                            CornerRadius="{Binding Path=(wpf:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{Binding Path=(wpf:TextFieldAssist.RippleOnFocusEnabled), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                            </Border.RenderTransform>
                        </Border>
                        <Border
                            x:Name="textFieldBoxBorder"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{Binding Path=(wpf:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True">
                            <Grid>
                                <Border
                                    x:Name="border"
                                    Padding="0,4,0,4"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="True">
                                    <Grid
                                        x:Name="textFieldGrid"
                                        MinWidth="1"
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ScrollViewer
                                            x:Name="PART_ContentHost"
                                            Focusable="false"
                                            HorizontalScrollBarVisibility="Hidden"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                            VerticalScrollBarVisibility="Hidden" />
                                        <wpf:SmartHint
                                            x:Name="Hint"
                                            Grid.Column="0"
                                            Padding="{TemplateBinding Padding}"
                                            FloatingOffset="{Binding Path=(wpf:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"
                                            FloatingScale="{Binding Path=(wpf:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                            FontSize="{TemplateBinding FontSize}"
                                            Hint="{Binding Path=(wpf:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}"
                                            HintOpacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                            HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static wpf:HintProxyFabricConverter.Instance}}"
                                            UseFloating="{Binding Path=(wpf:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Grid>
                                </Border>
                                <Border
                                    x:Name="textFieldBoxBottomLine"
                                    Height="0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Bottom"
                                    Background="{TemplateBinding BorderBrush}"
                                    CornerRadius="{Binding Path=(wpf:TextFieldAssist.UnderlineCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                    SnapsToDevicePixels="True" />
                                <Line
                                    x:Name="DashedLine"
                                    VerticalAlignment="Bottom"
                                    Opacity="0.56"
                                    Stroke="{TemplateBinding BorderBrush}"
                                    StrokeDashArray="1,2.5"
                                    StrokeDashCap="Round"
                                    StrokeThickness="1.25"
                                    Visibility="Collapsed"
                                    X1="0"
                                    X2="{Binding ActualWidth, ElementName=border}"
                                    Y1="0"
                                    Y2="0" />
                                <wpf:Underline
                                    x:Name="Underline"
                                    Background="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}"
                                    CornerRadius="{Binding Path=(wpf:TextFieldAssist.UnderlineCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                    Visibility="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </Border>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ScaleTransform"
                                            Storyboard.TargetProperty="ScaleX"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ScaleTransform"
                                            Storyboard.TargetProperty="ScaleY"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Storyboard.TargetName="ScaleTransform"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Storyboard.TargetName="ScaleTransform"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ScaleTransform"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="ScaleTransform"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="wpf:HintAssist.IsFloating" Value="True">
                            <Setter TargetName="border" Property="Margin" Value="0,12,0,0" />
                        </Trigger>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                            <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                            <Setter TargetName="textFieldBoxBorder" Property="Padding" Value="0,8,0,0" />
                            <Setter TargetName="textFieldGrid" Property="Margin" Value="16,0,16,0" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0" />
                            <Setter TargetName="border" Property="Cursor" Value="IBeam" />
                            <Setter TargetName="Hint" Property="Margin" Value="0,0,0,16" />
                            <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,8,0,8" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,0,0,8" />
                            <Setter TargetName="Hint" Property="Margin" Value="0,0,0,0" />
                        </MultiTrigger>
                        <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="1" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                            <Setter TargetName="textFieldBoxBorder" Property="Padding" Value="0,8,0,0" />
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-1" />
                            <Setter TargetName="textFieldGrid" Property="Margin" Value="16,0,16,0" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0" />
                            <Setter TargetName="border" Property="Cursor" Value="IBeam" />
                            <Setter TargetName="Underline" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Hint" Property="Margin" Value="0,0,0,16" />
                            <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,8,0,8" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,0,0,8" />
                            <Setter TargetName="Hint" Property="Margin" Value="0,0,0,0" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.42" />
                            <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Opacity" Value="0.42" />
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="DashedLine" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Underline" Property="IsActive" Value="True" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,2" />
                            <Setter TargetName="border" Property="Padding" Value="0,4,0,3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                            <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                        </MultiTrigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Validation.HasError" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <Style
        x:Key="InputX1"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="TriangleCoordinate.TriangleFirstPointX"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputY1"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="TriangleCoordinate.TriangleFirstPointY"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputX2"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="TriangleCoordinate.TriangleSecondPointX"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputY2"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="TriangleCoordinate.TriangleSecondPointY"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputX3"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="TriangleCoordinate.TriangleThirdPointX"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputY3"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="TriangleCoordinate.TriangleThirdPointY"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputLx1"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="LineCoordinate.LineStartPointX"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputLy1"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="LineCoordinate.LineStartPointY"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputLx2"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="LineCoordinate.LineEndPointX"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="InputLy2"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Text">
            <Setter.Value>
                <Binding
                    Mode="TwoWay"
                    Path="LineCoordinate.LineEndPointY"
                    UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <viewModels:InputRule />
                    </Binding.ValidationRules>
                </Binding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MinButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="16,4,16,4" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Margin" Value="0,0,5,0" />
        <Setter Property="ToolTip" Value="最小化" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <wpf:Ripple
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Focusable="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <wpf:Ripple.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="border" Path="ActualWidth" />
                                        <Binding ElementName="border" Path="ActualHeight" />
                                        <Binding ElementName="border" Path="CornerRadius" />
                                        <Binding ElementName="border" Path="BorderThickness" />
                                    </MultiBinding>
                                </wpf:Ripple.Clip>
                            </wpf:Ripple>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true" />
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MaxButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="16,4,16,4" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Margin" Value="0,0,5,0" />
        <Setter Property="ToolTip" Value="{Binding RespectToWindow.TheWindowState}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <wpf:Ripple
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Focusable="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <wpf:Ripple.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="border" Path="ActualWidth" />
                                        <Binding ElementName="border" Path="ActualHeight" />
                                        <Binding ElementName="border" Path="CornerRadius" />
                                        <Binding ElementName="border" Path="BorderThickness" />
                                    </MultiBinding>
                                </wpf:Ripple.Clip>
                            </wpf:Ripple>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true" />
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CloseButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="16,4,16,4" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Margin" Value="0,0,15,0" />
        <Setter Property="ToolTip" Value="关闭" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <wpf:Ripple
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Focusable="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <wpf:Ripple.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="border" Path="ActualWidth" />
                                        <Binding ElementName="border" Path="ActualHeight" />
                                        <Binding ElementName="border" Path="CornerRadius" />
                                        <Binding ElementName="border" Path="BorderThickness" />
                                    </MultiBinding>
                                </wpf:Ripple.Clip>
                            </wpf:Ripple>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true" />
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BorderFirst" TargetType="Border">
        <Setter Property="Background" Value="#3448a1" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="BorderSecond" TargetType="Border">
        <Setter Property="Background" Value="#3448a1" />
    </Style>
    <Style x:Key="BorderThird" TargetType="Border">
        <Setter Property="Background" Value="#000000" />
        <Setter Property="BorderBrush" Value="#3448a1" />
    </Style>
    <Style x:Key="BorderFourth" TargetType="Border">
        <Setter Property="Background" Value="#f1f1f1" />
        <Setter Property="BorderBrush" Value="#3448a1" />
    </Style>
    <Style x:Key="StackPanel" TargetType="StackPanel">
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>
</ResourceDictionary>